import matplotlib.pyplot as plt
import numpy as np

# Data
names = ['RS', 'DT', 'QDA', 'MLP', 'GNB', 'LR']

# Datasets
datasets = {
'DS_001': {
        'gzip': [3.2878176357543683, 3.4777329270554596, 3.4821679138882065, 3.4778671140572897, 3.4831639018984712, 3.4814832044768576],
        'lz4': [1.9002783252011437, 2.0122295119424183, 2.015109812851995, 2.0130807462905924, 2.015186638572209, 2.0144785063834485],
        'zstd': [3.110857434453518, 6.635597213154282, 6.698019889821015, 6.652566828697314, 6.7259016545249946, 6.738393191216678]
    },
    'DS_002': {
        'gzip': [3.2257293900850383, 3.358829983145382, 3.3628302035186137, 3.3587777956724856, 3.364444104112904, 3.3619800311373824],
        'lz4': [1.8623732565375812, 1.944017230396883, 1.9457854327576005, 1.9439347978080586, 1.9466974527649143, 1.9452081951100242],
        'zstd': [3.0072016739391834, 3.1124869717954775, 3.1164353248251593, 3.1125375712633843, 3.1181652926331047, 3.115579755017914]
    },
    'DS_003': {
        'gzip': [3.185232744400405, 3.359049899050777, 3.3617300548560025, 3.35912123890487, 3.362964218145622, 3.3611659801410463],
        'lz4': [1.83558803858427, 1.9520334259904042, 1.9532200768813521, 1.9520664790926565, 1.953841742698379, 1.9529465337935594],
        'zstd': [2.9519920173962726, 3.1088816000339095, 3.112634424734935, 3.1089829488514193, 3.114391447545067, 3.111852729996454]
    },
    'orders': {
        'gzip': [4.626459484250627, 4.801174761728703, 4.802642656894739, 4.801389120457791, 4.802699626771997, 4.801407243776763],
        'lz4': [2.2804338128832855, 2.369303877182849, 2.3688859907637547, 2.3693565720920104, 2.3691738295911913, 2.368993222472064],
        'zstd': [4.123661862078868, 4.225694519850671, 4.226838804075449, 4.225888648241761, 4.2278769500757685, 4.22593988099686]
    },
    'partsupp': {
        'gzip': [4.721717068568256, 4.894655984104461, 4.894304098179765, 4.894670579544381, 4.894964128537616, 4.894603684492867],
        'lz4': [2.3365984792616006, 2.41280250212832, 2.4131132165099745, 2.4128169350022755, 2.4133832537143323, 2.4127244296772297],
        'zstd': [4.085023656990318, 4.240001701961622, 4.2391276791313, 4.239844117015558, 4.239202642077239, 4.239901308653369]
    },
    'flight': {
        'gzip': [5.519644719763616, 7.266279736383336, 6.382843215857124, 7.285887655745461, 7.462770897591521, 7.1365173560877615],
        'lz4': [2.779097308957105, 2.775171028714359, 2.77181431901345, 2.7743793571749062, 2.7748237487376186, 2.7754957227146573],
        'zstd': [5.0773827394453495, 5.078603407149604, 5.138524903836978, 5.079335207723715, 5.077428265249012, 5.128754553105656]
    },
    'nypd': {
        'gzip': [6.053211178035975, 7.426640544353733, 7.500121641689451, 7.429118553915057, 7.379005253799463, 7.402857872141763],
        'lz4': [2.887683073480305, 3.1023705797021655, 3.1013147365851594, 3.1027919642847657, 3.1170233438669093, 3.097732563426389],
        'zstd': [5.696934966470044, 6.184090793569344, 6.195464657371354, 6.182160953826217, 6.3204179564301715, 6.220046669843722]
    },
    '100k_a': {
        'gzip': [2.5658469202174623, 3.341591309467487, 3.3325403615132756, 3.3416335754645567, 3.3419864208502195, 3.3415830912033284],
        'lz4': [1.3914215242363763, 1.933273866037664, 1.9272701193941406, 1.933349418137598, 1.9343032838951884, 1.9333982501396036],
        'zstd': [2.643516019053573, 3.5681333726918774, 3.5582889256391286, 3.568051830041377, 3.5699550540513725, 3.5681245601054226]
    },
    'df_electronics': {
        'gzip': [6.988522315015461, 11.243535712433218, 11.158377588179583, 11.1087209628212, 11.048349306417213, 11.24064626803451],
        'lz4': [2.8351652573738035, 4.506202771108131, 4.454582244761503, 4.438729637217543, 4.408232549619174, 4.500665793648901],
        'zstd': [5.832333033439557, 9.206830254819412, 9.147181764324426, 9.146058079705682, 9.128802350487108, 9.142412529315058]
    },
    'Submissions': {
        'gzip': [2.977884169499084, 3.977889756464242, 4.010356604076981, 3.977869677202463, 3.9807407363094387, 3.9779528143199756],
        'lz4': [1.597439467282775, 2.2071054858838157, 2.2265915839488652, 2.207100357895917, 2.2084469155278317, 2.207156477806543],
        'zstd': [2.8415806844457543, 3.8641108938416853, 3.8736785519504267, 3.8643466911835036, 3.866798581673207, 3.86425749617708]
    },
    'Submissions_chunk_by_chunk': {
        'gzip': [2.977884169499084, 3.919620704929111, 3.878465013379995, 3.919640662211173, 3.9077814209728503, 3.919701098425638],
        'lz4': [1.597439467282775, 2.177969687765184, 2.1489312349571916, 2.1779783464536884, 2.1702029283991084, 2.1780047402301705],
        'zstd': [2.8415806844457543, 3.855279058479065, 3.7781954851920063, 3.8553126723070896, 3.8362584426074102, 3.855308924091071]
    },
    'Arrests_chunk_by_chunk': {
        'gzip': [5.131896489006796, 5.701679034362459, 5.70727639805673, 5.701613273435813, 5.708399729212387, 5.670726897103908],
        'lz4': [2.533609467595652, 2.8095940169246996, 2.8135689389528804, 2.8094003356397703, 2.8180520723485216, 2.801351833119957],
        'zstd': [5.377531572719619, 6.0148891067909265, 6.031187819412122, 6.016272893480882, 6.051734741315054, 5.927201137971722]
    }

}


def plot_dataset(dataset_name, comp_methods, names):
    # Setup figure
    plt.figure(figsize=(10, 5))

    # Number of methods
    n_methods = len(comp_methods)
    # Width of a bar
    bar_width = 0.25
    # Positions of the bars on the x-axis
    r = np.arange(len(names))

    # Plot each compression method for the current dataset
    for i, (method_name, comp_ratios) in enumerate(comp_methods.items()):
        # Calculate position for each method
        pos = [x + i * bar_width for x in r]

        plt.bar(pos, comp_ratios, width=bar_width, label=method_name)

        # Annotate each bar with its compression ratio value
        for x, y in zip(pos, comp_ratios):
            plt.text(x, y, f'{y:.4f}', ha='center', va='bottom')

    # Set chart title and labels
    plt.title(f'Compression Ratios for {dataset_name}')
    plt.xticks([r + bar_width for r in range(len(names))], names, rotation=45, ha="right")
    plt.ylabel('Compression Ratio')

    # Add a legend
    plt.legend()

    plt.tight_layout()
    plt.show()


# Loop over each dataset and plot it individually
for dataset_name, comp_methods in datasets.items():
    plot_dataset(dataset_name, comp_methods, names)



